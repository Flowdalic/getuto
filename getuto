#!/bin/bash

# This bash script maintains /etc/portage/gnupg in a Gentoo installation.
# It should be run as root always before downloading and installing binary
# packages.

# If the directory does not exist yet, it will be set up such that
# the Gentoo Release Engineering keys are trusted for signing binary
# packages.
# The keys are taken from sec-keys/openpgp-keys-gentoo-release.
# If the directory already exists, then all keys in it will be refreshed
# from keyservers.
# In addition sanity checks and corrections are performed ...

# Runtime requirements:
# app-crypt/gnupg
# dev-libs/openssl
# sec-keys/openpgp-keys-gentoo-release
set -e

[[ $(whoami) == 'root' ]] || { echo "${0} must be run as root!" ; exit 100 ; }

mykeyserver="hkps://keys.openpgp.org"

export GNUPGHOME="${ROOT%/}"/etc/portage/gnupg

gpgconf --kill gpg-agent

if [[ ! -d ${GNUPGHOME} ]] ; then
	# The directory does not exist yet.
	mkdir -p "${GNUPGHOME}"
	chmod u=rwx,go=rx "${GNUPGHOME}"

	# Generate a local ultimate trust anchor key.
	PASS="$(openssl rand -base64 32)"

	KEY_CONFIG_FILE="$(mktemp)"
	chmod 600 "${KEY_CONFIG_FILE}"

	cat > "${KEY_CONFIG_FILE}" <<-EOF
	%echo Generating Portage local OpenPGP trust key
	Key-Type: RSA
	Key-Length: 3072
	Subkey-Type: RSA
	Subkey-Length: 3072
	Name-Real: Portage Local Trust Key
	Name-Comment: local signing only
	Name-Email: portage@localhost
	Expire-Date: 0
	Passphrase: ${PASS}
	%commit
	%echo done
	EOF

	gpg --no-permission-warning --batch --generate-key "${KEY_CONFIG_FILE}"
	rm -f "${KEY_CONFIG_FILE}"

	touch "${GNUPGHOME}/pass"
	chmod 600 "${GNUPGHOME}/pass"
	echo "${PASS}" > "${GNUPGHOME}/pass"

	gpg --no-permission-warning --batch --list-secret-keys --keyid-format=long --with-colons | grep "^fpr" | sed -n 's/^fpr:::::::::\([[:alnum:]]\+\):/\1/p' > "${GNUPGHOME}/mykeyid"
	mykeyid=$(<"${GNUPGHOME}/mykeyid")

	# Import all release engineering keys.
	if [[ ! -f "${ROOT%/}"/usr/share/openpgp-keys/gentoo-release.asc ]] ; then
		echo "\"${ROOT%/}\"/usr/share/openpgp-keys/gentoo-release.asc not found. Is sec-keys/openpgp-keys-gentoo-release installed?"
		exit 1
	fi

	gpg --no-permission-warning --batch --import "${ROOT%/}"/usr/share/openpgp-keys/gentoo-release.asc

	# List all release engineering keys.
	# See https://serverfault.com/a/946428.

	myrelkeys=$(gpg --no-permission-warning --batch --list-keys --keyid-format=long --with-colons | grep "^fpr" | sed -n 's/^fpr:::::::::\([[:alnum:]]\+\):/\1/p' | grep -v "${mykeyid}")

	# TODO: keys.openpgp.org lacks a UID for our keys, need to verify email
	gpg --no-permission-warning --batch --keyserver "${mykeyserver}" --recv-keys ${myrelkeys} || true

	# Locally sign all release engineering keys.
	for relkeyid in ${myrelkeys} ; do
		# We have to use --quick-lsign-key for this to work with batch: https://dev.gnupg.org/T1606
		if ! gpg --no-permission-warning --batch --yes --no-tty --passphrase-file="${GNUPGHOME}/pass" --pinentry-mode loopback --quick-lsign-key "${relkeyid}" ; then
			# But that won't work for subkeys, so fall back to a hackier method.
			set -o pipefail
			echo -e "y\ny\n" | gpg --command-fd 0 --no-permission-warning --yes --no-tty --passphrase-file="${GNUPGHOME}/pass" --pinentry-mode loopback --lsign-key "${relkeyid}"
			set -u pipefail
		fi
	done

	# Update the trustdb
	gpg --no-permission-warning --batch --check-trustdb

	# Make sure the trustdb is world-readable.
	chmod ugo+r "${GNUPGHOME}/trustdb.gpg"

fi

# Always re-import the system keys because it might be our only source of updates
# for e.g. revocations, renewals, etc if we're on a firewalled machine.
gpg --no-permission-warning --batch --import "${ROOT%/}"/usr/share/openpgp-keys/gentoo-release.asc
# Refresh all keys from the keyserver if we can.
gpg --no-permission-warning --batch --keyserver "${mykeyserver}" --refresh-keys || true # TODO: keys.openpgp.org lacks a UID for our keys, need to verify email

# Make sure the trustdb is world-readable (again).
chmod ugo+r "${GNUPGHOME}/trustdb.gpg"
